
```markdown
# 🍽️ Restaurant Full-Stack App

A **full-stack restaurant management application** built with **React**, **Node.js/Express**, and **MySQL**.  
Supports **admin menu management**, **client menu browsing with offline caching**, **multi-language support**, and **real-time discount updates**.

---

## 🚀 Features

### Client Side
- Browse menu items with **category filters**  
- **Search** menu items by name or description  
- **Offline caching** for faster load and slow connections  
- **Responsive UI** with badges for specials & discounts  
- Multi-language support

### Admin Side
- Add/Edit/Delete menu items  
- Upload images with live preview  
- Set **availability**, **special status**, and **discounts**  
- Manage categories: Main Dish, Drink, Fasting

### Backend
- RESTful API endpoints for menu items  
- Validation for price, discount, and required fields  
- Image upload support  
- Multi-language content handling

---

## 🗂️ Folder Structure

```

restaurant/
├── backend/
│   ├── controllers/
│   ├── models/
│   ├── routes/
│   ├── utils/
│   ├── .env
│   └── server.js
├── frontend/
│   ├── src/
│   │   ├── components/
│   │   ├── pages/
│   │   ├── lib/
│   │   └── App.tsx
│   ├── public/
│   └── package.json
├── .gitignore
└── README.md

````

---

## ⚙️ Getting Started

### Prerequisites
- Node.js >= 18  
- npm or yarn  
- MySQL  
- Git  

---

### Backend Setup

```bash
cd backend
npm install
cp .env.example .env
````

Edit `.env`:

```env
PORT=5000
DB_HOST=localhost
DB_USER=root
DB_PASSWORD=yourpassword
DB_NAME=restaurant_db
```

Start server:

```bash
npm run dev
```

API will run at `http://localhost:5000`.

---

### Frontend Setup

```bash
cd frontend
npm install
cp .env.example .env
```

Edit `.env`:

```env
VITE_API_URL=http://localhost:5000/api
```

Start frontend:

```bash
npm run dev
```

Frontend will run at `http://localhost:5173`.

---

## 🔗 API Endpoints

### Public

* `GET /api/menu` — Get all available menu items
* `GET /api/menu/:id` — Get a single menu item

### Admin (Protected)

* `POST /api/menu` — Create a menu item
* `PUT /api/menu/:id` — Update a menu item
* `DELETE /api/menu/:id` — Delete a menu item

---

## 💾 Caching Logic

* Frontend stores menu data in **local storage**
* If fetching from server fails, cached data is used
* Provides **offline support** and reduces server load

---

## 📝 Contributing

1. Fork the repository
2. Create a branch: `git checkout -b feature-name`
3. Commit your changes: `git commit -m "Add feature"`
4. Push to branch: `git push origin feature-name`
5. Create a Pull Request

---

## 📷 Screenshots

<div align="center">
  <img src="screenshots/menu-page.png" width="300" alt="Menu Page"/>
  <img src="screenshots/admin-page.png" width="300" alt="Admin Page"/>
</div>

---

## 📄 License

MIT License © 2025 [Jossy](https://github.com/joccy-code)

---

## ✉️ Contact

* GitHub: [https://github.com/joccy-code](https://github.com/joccy-code)
* Email: [jossyyoseph14@gmail.com](mailto:your.jossyyoseph14@gmail.com)
